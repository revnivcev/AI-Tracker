import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from app.services.tracker_service import TrackerService
from app.services.llm_service import LLMService
from app.models.database import get_db
from app.models.digest_log import DigestLog
import re

logger = logging.getLogger(__name__)


class DigestService:
    def __init__(self, tracker_service: TrackerService, llm_service: LLMService):
        self.tracker_service = tracker_service
        self.llm_service = llm_service

    async def generate_digest(self, user_id: int, queue_key: str, since_hours: int = 24, status_callback=None) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏"""
        try:
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {since_hours} —á–∞—Å–æ–≤")
            
            if status_callback:
                await status_callback("üì° –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Yandex Tracker...")
            
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ)
            # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è Done –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Ä–∞–Ω—å—à–µ
            all_issues = self.tracker_service.get_queue_issues(queue_key)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_issues)} –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏ {queue_key}")
            
            if not all_issues:
                logger.info(f"–ù–µ—Ç –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏ {queue_key}")
                return f"üìä –î–∞–π–¥–∂–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ {queue_key}\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {since_hours} —á–∞—Å–æ–≤\n\nüìù –ù–µ—Ç –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏."

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            cutoff_time = datetime.now() - timedelta(hours=since_hours)
            
            recent_issues = []
            for issue in all_issues:
                updated_str = issue.get('updated')
                if updated_str:
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        if 'T' in updated_str:
                            updated_time = datetime.fromisoformat(updated_str.replace('Z', '+00:00'))
                        else:
                            updated_time = datetime.fromisoformat(updated_str)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                        if updated_time >= cutoff_time:
                            recent_issues.append(issue)
                            logger.info(f"–ó–∞–¥–∞—á–∞ {issue.get('key')} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ {updated_time} - –≤–∫–ª—é—á–∞–µ–º –≤ –¥–∞–π–¥–∂–µ—Å—Ç")
                        else:
                            logger.info(f"–ó–∞–¥–∞—á–∞ {issue.get('key')} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ {updated_time} - —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã {updated_str}: {e}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –≤–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á—É
                        recent_issues.append(issue)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á—É
                    recent_issues.append(issue)
                    logger.info(f"–ó–∞–¥–∞—á–∞ {issue.get('key')} –±–µ–∑ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –≤–∫–ª—é—á–∞–µ–º –≤ –¥–∞–π–¥–∂–µ—Å—Ç")

            logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(recent_issues)} –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {since_hours} —á–∞—Å–æ–≤")
            
            if not recent_issues:
                logger.info(f"–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ {queue_key} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {since_hours} —á–∞—Å–æ–≤")
                return f"üìä –î–∞–π–¥–∂–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ {queue_key}\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {since_hours} —á–∞—Å–æ–≤\n\nüìù –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–¥–∞—á–∞—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥."

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if status_callback:
                await status_callback("üìä –ì—Ä—É–ø–ø–∏—Ä—É—é –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º...")
                
            status_groups = self._group_issues_by_status(recent_issues)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
            if status_callback:
                await status_callback("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
                
            summary = await self._generate_queue_summary(queue_key, status_groups, recent_issues)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            if status_callback:
                await status_callback("üìù –§–æ—Ä–º–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç...")
                
            digest = self._format_digest(queue_key, status_groups, summary, since_hours)

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            self._log_digest(user_id, queue_key, digest, len(recent_issues))

            return digest

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key}: {e}")
            queue_url = f"https://tracker.yandex.ru/queues/{queue_key}"
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ <a href=\"{queue_url}\">{queue_key}</a>"

    async def _generate_queue_summary(self, queue_key: str, status_groups: Dict[str, List[Dict]], issues: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
            summary_data = {
                "queue_key": queue_key,
                "total_issues": len(issues),
                "status_groups": status_groups,
                "issues": issues
            }
            
            summary = await self.llm_service.create_queue_summary(summary_data)
            return summary if summary else "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–¥–∞—á–∞—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥."
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            participants = self._extract_participants(status_groups)
            fallback = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ {len(issues)} –∑–∞–¥–∞—á–∞—Ö. "
            if participants:
                fallback += f"–ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(participants)}. "
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            for status, status_issues in status_groups.items():
                if status_issues:
                    fallback += f"{status}: {len(status_issues)} –∑–∞–¥–∞—á. "
            
            return fallback

    def _group_issues_by_status(self, issues: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        status_groups = {
            'To Do': [],
            'In Progress': [],
            'Blocked': [],
            'Done': []
        }

        logger.info(f"–ì—Ä—É–ø–ø–∏—Ä—É–µ–º {len(issues)} –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
        
        for issue in issues:
            original_status = issue.get('status', 'Unknown')
            normalized_status = self._normalize_status(original_status)
            
            logger.info(f"–ó–∞–¥–∞—á–∞ {issue.get('key', 'unknown')}: '{original_status}' -> '{normalized_status}'")
            
            if normalized_status in status_groups:
                status_groups[normalized_status].append(issue)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å '{normalized_status}', –¥–æ–±–∞–≤–ª—è–µ–º –≤ 'To Do'")
                status_groups['To Do'].append(issue)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
        for status, status_issues in status_groups.items():
            logger.info(f"–°—Ç–∞—Ç—É—Å '{status}': {len(status_issues)} –∑–∞–¥–∞—á")

        return status_groups

    def _normalize_status(self, status: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        status_lower = status.lower()
        logger.info(f"–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å: '{status}' -> '{status_lower}'")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if any(word in status_lower for word in ['done', '–≥–æ—Ç–æ–≤–æ', 'complete', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ', '—Ä–µ—à–µ–Ω–æ', 'resolved', 'closed', '–∑–∞–∫—Ä—ã—Ç–æ', '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ']):
            logger.info(f"–°—Ç–∞—Ç—É—Å '{status}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ 'Done'")
            return 'Done'
        # –í —Ä–∞–±–æ—Ç–µ
        elif any(word in status_lower for word in ['progress', '–≤ —Ä–∞–±–æ—Ç–µ', 'in progress', '—Ä–∞–±–æ—Ç–∞', '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ']):
            logger.info(f"–°—Ç–∞—Ç—É—Å '{status}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ 'In Progress'")
            return 'In Progress'
        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        elif any(word in status_lower for word in ['blocked', '–±–ª–æ–∫', 'block', '–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', '—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'information required', 'need info', 'info needed']):
            logger.info(f"–°—Ç–∞—Ç—É—Å '{status}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ 'Blocked'")
            return 'Blocked'
        # –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
        elif any(word in status_lower for word in ['todo', 'to do', '–Ω–æ–≤–∞—è', 'new', '–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', '–æ—Ç–∫—Ä—ã—Ç–∞', 'open', '–æ—Ç–∫—Ä—ã—Ç']):
            logger.info(f"–°—Ç–∞—Ç—É—Å '{status}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ 'To Do'")
            return 'To Do'
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å '{status}', –∏—Å–ø–æ–ª—å–∑—É–µ–º 'To Do' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return 'To Do'

    def _extract_participants(self, status_groups: Dict[str, List[Dict]]) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∑–∞–¥–∞—á"""
        participants = set()
        for issues in status_groups.values():
            for issue in issues:
                assignee = issue.get('assignee', '')
                if assignee and assignee.strip() and assignee != 'Unassigned':
                    participants.add(assignee.strip())
        return list(participants)

    def _format_digest(self, queue_key: str, status_groups: Dict[str, List[Dict]], summary: str, since_hours: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Telegram"""
        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key}")
        logger.info(f"–°—Ç–∞—Ç—É—Å—ã –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ: {list(status_groups.keys())}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
        queue_url = f"https://tracker.yandex.ru/queues/{queue_key}"
        
        digest = f"üìä <b>–î–∞–π–¥–∂–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ <a href=\"{queue_url}\">{queue_key}</a></b>\n"
        digest += f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {since_hours} —á–∞—Å–æ–≤\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –æ—á–µ—Ä–µ–¥–∏
        if summary and summary.strip():
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ LLM
            clean_summary = summary.strip()
            if clean_summary.startswith("üìù –†–µ–∑—é–º–µ:"):
                clean_summary = clean_summary.replace("üìù –†–µ–∑—é–º–µ:", "").strip()
            if clean_summary.startswith("–†–µ–∑—é–º–µ:"):
                clean_summary = clean_summary.replace("–†–µ–∑—é–º–µ:", "").strip()
            
            # –ó–∞–º–µ–Ω—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—á–µ—Ä–µ–¥–∏ (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
            queue_pattern = re.compile(r'\b' + re.escape(queue_key) + r'\b', re.IGNORECASE)
            clean_summary = queue_pattern.sub(f'<a href="{queue_url}">{queue_key}</a>', clean_summary)
                
            digest += f"üìù <b>–†–µ–∑—é–º–µ:</b> {clean_summary}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        participants = self._extract_participants(status_groups)
        if participants:
            digest += f"üë• <b>–ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {', '.join(participants)}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        for status, issues in status_groups.items():
            if issues:
                logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å '{status}' —Å {len(issues)} –∑–∞–¥–∞—á–∞–º–∏")
                digest += f"üìã <b>{status} ({len(issues)}):</b>\n"
                for issue in issues:
                    assignee = issue.get('assignee', '')
                    assignee_text = f" (üë§ {assignee})" if assignee and assignee != 'Unassigned' else ""
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–¥–∞—á–∏
                    issue_key = issue.get('key', '')
                    issue_url = f"https://tracker.yandex.ru/{issue_key}"
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Å—Å—ã–ª–æ–∫
                    digest += f"‚Ä¢ <a href=\"{issue_url}\">{issue_key}</a> ‚Äì {issue.get('summary', '')}{assignee_text}\n"
                digest += "\n"

        logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(digest)} —Å–∏–º–≤–æ–ª–æ–≤")
        return digest

    def _log_digest(self, user_id: int, queue_key: str, digest_text: str, issues_count: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db = next(get_db())
            log_entry = DigestLog(
                user_id=user_id,
                queue_key=queue_key,
                digest_text=digest_text,
                issues_count=issues_count
            )
            db.add(log_entry)
            db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}") 