import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from app.services.tracker_service import TrackerService
from app.services.llm_service import LLMService
from app.models.database import get_db
from app.models.digest_log import DigestLog
import re

logger = logging.getLogger(__name__)


class DigestService:
    def __init__(self, tracker_service: TrackerService, llm_service: LLMService):
        self.tracker_service = tracker_service
        self.llm_service = llm_service

    async def generate_digest(self, user_id: int, queue_key: str, since_hours: int = 24, status_callback=None) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        try:
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            last_digest_time = self._get_last_digest_time(user_id, queue_key)
            
            if status_callback:
                await status_callback("üì° –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Yandex Tracker...")
            
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            all_issues = self.tracker_service.get_queue_issues(queue_key)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_issues)} –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏ {queue_key}")
            
            if not all_issues:
                logger.info(f"–ù–µ—Ç –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏ {queue_key}")
                return self._format_empty_digest(queue_key, since_hours)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if last_digest_time:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                cutoff_time = last_digest_time
                time_description = f"—Å {last_digest_time.strftime('%d.%m.%Y %H:%M')}"
                logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è {time_description}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                cutoff_time = datetime.now() - timedelta(hours=since_hours)
                time_description = f"–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {since_hours} —á–∞—Å–æ–≤"
                logger.info(f"–ü–µ—Ä–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {time_description}")

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            recent_issues = []
            for issue in all_issues:
                updated_str = issue.get('updated')
                if updated_str:
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        if 'T' in updated_str:
                            updated_time = datetime.fromisoformat(updated_str.replace('Z', '+00:00'))
                        else:
                            updated_time = datetime.fromisoformat(updated_str)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                        if updated_time >= cutoff_time:
                            recent_issues.append(issue)
                            logger.info(f"–ó–∞–¥–∞—á–∞ {issue.get('key')} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ {updated_time} - –≤–∫–ª—é—á–∞–µ–º –≤ –¥–∞–π–¥–∂–µ—Å—Ç")
                        else:
                            logger.info(f"–ó–∞–¥–∞—á–∞ {issue.get('key')} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ {updated_time} - —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã {updated_str}: {e}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –≤–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á—É
                        recent_issues.append(issue)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á—É
                    recent_issues.append(issue)
                    logger.info(f"–ó–∞–¥–∞—á–∞ {issue.get('key')} –±–µ–∑ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –≤–∫–ª—é—á–∞–µ–º –≤ –¥–∞–π–¥–∂–µ—Å—Ç")

            logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(recent_issues)} –∑–∞–¥–∞—á {time_description}")
            
            if not recent_issues:
                logger.info(f"–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ {queue_key} {time_description}")
                return self._format_no_changes_digest(queue_key, time_description)

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if status_callback:
                await status_callback("üìä –ì—Ä—É–ø–ø–∏—Ä—É—é –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º...")
                
            status_groups = await self._group_issues_by_status(recent_issues)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if status_callback:
                await status_callback("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
                
            summary = await self._generate_changes_summary(queue_key, status_groups, recent_issues, last_digest_time)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            if status_callback:
                await status_callback("üìù –§–æ—Ä–º–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç...")
                
            digest = self._format_digest(queue_key, status_groups, summary, time_description)

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            self._log_digest(user_id, queue_key, digest, len(recent_issues))

            return digest

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key}: {e}")
            queue_url = f"https://tracker.yandex.ru/queues/{queue_key}"
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ <a href=\"{queue_url}\">{queue_key}</a>"

    def _get_last_digest_time(self, user_id: int, queue_key: str) -> Optional[datetime]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            db = next(get_db())
            last_digest = db.query(DigestLog).filter(
                DigestLog.user_id == user_id,
                DigestLog.queue_key == queue_key
            ).order_by(DigestLog.created_at.desc()).first()
            
            if last_digest:
                created_at = last_digest.created_at
                logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è {queue_key}: {created_at}")
                return created_at.replace(tzinfo=None)
            else:
                logger.info(f"–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –¥–ª—è {queue_key}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return None

    def _format_empty_digest(self, queue_key: str, since_hours: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏"""
        queue_url = f"https://tracker.yandex.ru/queues/{queue_key}"
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M UTC')
        
        return f"""üìä <b>–î–∞–π–¥–∂–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ <a href="{queue_url}">{queue_key}</a></b>
üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {since_hours} —á–∞—Å–æ–≤
üïê –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {current_time}

üìù –ù–µ—Ç –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏."""

    def _format_no_changes_digest(self, queue_key: str, time_description: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        queue_url = f"https://tracker.yandex.ru/queues/{queue_key}"
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M UTC')
        
        return f"""üìä <b>–î–∞–π–¥–∂–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ <a href="{queue_url}">{queue_key}</a></b>
üìÖ {time_description}
üïê –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {current_time}

üìù –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–¥–∞—á–∞—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥."""

    async def _generate_changes_summary(self, queue_key: str, status_groups: Dict[str, List[Dict]], issues: List[Dict], last_digest_time: Optional[datetime]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        try:
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
            return self._generate_fast_summary(queue_key, status_groups, issues, last_digest_time)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key}: {e}")
            return "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á–∞—Ö."

    def _generate_fast_summary(self, queue_key: str, status_groups: Dict[str, List[Dict]], issues: List[Dict], last_digest_time: Optional[datetime]) -> str:
        """–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM - –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            template_data = {
                "queue_key": queue_key,
                "total_issues": len(issues),
                "status_groups": status_groups,
                "last_digest_time": last_digest_time,
                "current_time": datetime.now()
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            return self._generate_summary_from_template(template_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –±—ã—Å—Ç—Ä–æ–º —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä–µ: {e}")
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
            return self._generate_simple_summary(status_groups)

    def _generate_summary_from_template(self, data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä"""
        queue_key = data["queue_key"]
        status_groups = data["status_groups"]
        last_digest_time = data.get("last_digest_time")
        
        summary_parts = []
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        done_issues = status_groups.get('–ó–∞–≤–µ—Ä—à–µ–Ω–∞', [])
        if done_issues:
            if len(done_issues) == 1:
                issue = done_issues[0]
                assignee = issue.get('assignee', '')
                assignee_text = f" (üë§ {assignee})" if assignee and assignee != 'Unassigned' else ""
                summary_parts.append(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {issue.get('key', '')}: {issue.get('summary', '')}{assignee_text}")
            else:
                summary_parts.append(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ {len(done_issues)} –∑–∞–¥–∞—á")
        
        # –ó–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
        review_issues = status_groups.get('–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', [])
        if review_issues:
            if len(review_issues) == 1:
                issue = review_issues[0]
                assignee = issue.get('assignee', '')
                assignee_text = f" (üë§ {assignee})" if assignee and assignee != 'Unassigned' else ""
                summary_parts.append(f"–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á–∞ {issue.get('key', '')}: {issue.get('summary', '')}{assignee_text}")
            else:
                summary_parts.append(f"–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ {len(review_issues)} –∑–∞–¥–∞—á")
        
        # –ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ
        in_progress_issues = status_groups.get('–í —Ä–∞–±–æ—Ç–µ', [])
        if in_progress_issues:
            if len(in_progress_issues) == 1:
                issue = in_progress_issues[0]
                assignee = issue.get('assignee', '')
                assignee_text = f" (üë§ {assignee})" if assignee and assignee != 'Unassigned' else ""
                summary_parts.append(f"–í —Ä–∞–±–æ—Ç–µ –∑–∞–¥–∞—á–∞ {issue.get('key', '')}: {issue.get('summary', '')}{assignee_text}")
            else:
                summary_parts.append(f"–í —Ä–∞–±–æ—Ç–µ {len(in_progress_issues)} –∑–∞–¥–∞—á")
        
        # –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
        new_issues = status_groups.get('–ù–æ–≤—ã–µ', [])
        if new_issues and last_digest_time:
            summary_parts.append(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_issues)} –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
        if summary_parts:
            summary = ". ".join(summary_parts) + "."
        else:
            if last_digest_time:
                summary = "–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–¥–∞—á–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
            else:
                summary = f"–ü–µ—Ä–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ {queue_key}. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {sum(len(issues) for issues in status_groups.values())}."
        
        return summary

    def _generate_simple_summary(self, status_groups: Dict[str, List[Dict]]) -> str:
        """–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ –∫–∞–∫ fallback"""
        parts = []
        for status, issues in status_groups.items():
            if issues:
                parts.append(f"{status}: {len(issues)} –∑–∞–¥–∞—á")
        
        if parts:
            return "–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á: " + ", ".join(parts) + "."
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑—é–º–µ."

    async def _group_issues_by_status(self, issues: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ LLM"""
        status_groups = {
            '–ù–æ–≤—ã–µ': [],
            '–í —Ä–∞–±–æ—Ç–µ': [],
            '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ': [],
            '–ó–∞–≤–µ—Ä—à–µ–Ω–∞': [],
            '–û—Ç–º–µ–Ω–µ–Ω–∞': []
        }

        logger.info(f"–ì—Ä—É–ø–ø–∏—Ä—É–µ–º {len(issues)} –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
        
        # –ö—ç—à –¥–ª—è —É–∂–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        status_cache = {}
        
        for issue in issues:
            original_status = issue.get('status', 'Unknown')
            description = issue.get('summary', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if original_status in status_cache:
                normalized_status = status_cache[original_status]
            else:
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM
                try:
                    result = await self.llm_service.classify_status(original_status)
                    if isinstance(result, dict):
                        normalized_status = result.get('normalized_status', '–ù–æ–≤—ã–µ')
                    else:
                        normalized_status = result
                    status_cache[original_status] = normalized_status
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ '{original_status}': {e}")
                    normalized_status = self._normalize_status(original_status)
                    status_cache[original_status] = normalized_status
            
            logger.debug(f"–ó–∞–¥–∞—á–∞ {issue.get('key', 'unknown')}: '{original_status}' -> '{normalized_status}'")
            
            if normalized_status in status_groups:
                status_groups[normalized_status].append(issue)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å '{normalized_status}', –¥–æ–±–∞–≤–ª—è–µ–º –≤ '–ù–æ–≤—ã–µ'")
                status_groups['–ù–æ–≤—ã–µ'].append(issue)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
        for status, status_issues in status_groups.items():
            logger.info(f"–°—Ç–∞—Ç—É—Å '{status}': {len(status_issues)} –∑–∞–¥–∞—á")

        return status_groups

    def _normalize_status(self, status: str) -> str:
        """–ë—ã—Å—Ç—Ä–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –±–µ–∑ LLM"""
        if not status:
            return '–ù–æ–≤—ã–µ'
            
        status_lower = status.lower().strip()
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)
        if any(word in status_lower for word in ['done', '–≥–æ—Ç–æ–≤–æ', 'complete', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ', '—Ä–µ—à–µ–Ω–æ', 'resolved', 'closed', '–∑–∞–∫—Ä—ã—Ç–æ', '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', 'finished', '–≥–æ—Ç–æ–≤', '–∑–∞–≤–µ—Ä—à–µ–Ω']):
            return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
        
        # –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
        elif any(word in status_lower for word in ['review', '—Ç–µ—Å—Ç', 'testing', '–ø—Ä–æ–≤–µ—Ä–∫–∞', '—Ä–µ–≤—å—é', 'code review', '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ']):
            return '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'
        
        # –í —Ä–∞–±–æ—Ç–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)
        elif any(word in status_lower for word in ['progress', '–≤ —Ä–∞–±–æ—Ç–µ', 'in progress', '—Ä–∞–±–æ—Ç–∞', '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', 'developing', '—Ä–∞–±–æ—Ç–∞–µ—Ç', '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–æ—Ç–∫—Ä—ã—Ç–∞—è', '–æ—Ç–∫—Ä—ã—Ç–∞', 'open']):
            return '–í —Ä–∞–±–æ—Ç–µ'
        
        # –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4)
        elif any(word in status_lower for word in ['blocked', '–±–ª–æ–∫', 'block', '–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', '—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'information required', 'need info', 'info needed', 'waiting', '–æ–∂–∏–¥–∞–Ω–∏–µ', '–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞', '–æ—Ç–º–µ–Ω–µ–Ω–∞', 'cancelled']):
            return '–û—Ç–º–µ–Ω–µ–Ω–∞'
        
        # –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        elif any(word in status_lower for word in ['todo', 'to do', '–Ω–æ–≤–∞—è', 'new', '–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', 'backlog', 'ready', '–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞']):
            return '–ù–æ–≤—ã–µ'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–æ–≤—ã–µ
        else:
            logger.debug(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å '{status}', –∏—Å–ø–æ–ª—å–∑—É–µ–º '–ù–æ–≤—ã–µ'")
            return '–ù–æ–≤—ã–µ'

    def _extract_participants(self, status_groups: Dict[str, List[Dict]]) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∑–∞–¥–∞—á"""
        participants = set()
        for issues in status_groups.values():
            for issue in issues:
                assignee = issue.get('assignee', '')
                if assignee and assignee.strip() and assignee != 'Unassigned':
                    participants.add(assignee.strip())
        return list(participants)

    def _format_digest(self, queue_key: str, status_groups: Dict[str, List[Dict]], summary: str, time_description: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Telegram"""
        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key}")
        logger.info(f"–°—Ç–∞—Ç—É—Å—ã –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ: {list(status_groups.keys())}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
        queue_url = f"https://tracker.yandex.ru/queues/{queue_key}"
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M UTC')
        
        digest = f"üìä <b>–î–∞–π–¥–∂–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ <a href=\"{queue_url}\">{queue_key}</a></b>\n"
        digest += f"üìÖ {time_description}\n"
        digest += f"üïê –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {current_time}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –æ—á–µ—Ä–µ–¥–∏
        if summary and summary.strip():
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ LLM
            clean_summary = summary.strip()
            if clean_summary.startswith("üìù –†–µ–∑—é–º–µ:"):
                clean_summary = clean_summary.replace("üìù –†–µ–∑—é–º–µ:", "").strip()
            if clean_summary.startswith("–†–µ–∑—é–º–µ:"):
                clean_summary = clean_summary.replace("–†–µ–∑—é–º–µ:", "").strip()
            
            # –£–±–∏—Ä–∞–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML –¥–ª—è Telegram
            clean_summary = self._convert_markdown_to_html(clean_summary)
            
            # –ó–∞–º–µ–Ω—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—á–µ—Ä–µ–¥–∏ (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
            queue_pattern = re.compile(r'\b' + re.escape(queue_key) + r'\b', re.IGNORECASE)
            clean_summary = queue_pattern.sub(f'<a href="{queue_url}">{queue_key}</a>', clean_summary)
                
            digest += f"üìù <b>–†–µ–∑—é–º–µ:</b> {clean_summary}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        participants = self._extract_participants(status_groups)
        if participants:
            digest += f"üë• <b>–ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {', '.join(participants)}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        for status, issues in status_groups.items():
            if issues:
                logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å '{status}' —Å {len(issues)} –∑–∞–¥–∞—á–∞–º–∏")
                digest += f"üìã <b>{status} ({len(issues)}):</b>\n"
                for issue in issues:
                    assignee = issue.get('assignee', '')
                    assignee_text = f" (üë§ {assignee})" if assignee and assignee != 'Unassigned' else ""
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–¥–∞—á–∏
                    issue_key = issue.get('key', '')
                    issue_url = f"https://tracker.yandex.ru/{issue_key}"
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Å—Å—ã–ª–æ–∫
                    digest += f"‚Ä¢ <a href=\"{issue_url}\">{issue_key}</a> ‚Äì {issue.get('summary', '')}{assignee_text}\n"
                digest += "\n"

        logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(digest)} —Å–∏–º–≤–æ–ª–æ–≤")
        return digest

    def _convert_markdown_to_html(self, text: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å markdown —Ä–∞–∑–º–µ—Ç–∫—É –≤ HTML –¥–ª—è Telegram"""
        if not text:
            return text
            
        # –ó–∞–º–µ–Ω—è–µ–º markdown –Ω–∞ HTML —Ç–µ–≥–∏
        text = text.replace('**', '<b>').replace('**', '</b>')  # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        text = text.replace('*', '<i>').replace('*', '</i>')    # –ö—É—Ä—Å–∏–≤
        text = text.replace('`', '<code>').replace('`', '</code>')  # –ö–æ–¥
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\n\s*\n', '\n', text)
        
        return text.strip()

    def _log_digest(self, user_id: int, queue_key: str, digest_text: str, issues_count: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db = next(get_db())
            log_entry = DigestLog(
                user_id=user_id,
                queue_key=queue_key,
                digest_text=digest_text,
                issues_count=issues_count
            )
            db.add(log_entry)
            db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}") 