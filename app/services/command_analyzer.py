import logging
import json
import re
import time
from typing import Dict, Any, Optional, List
from app.services.llm_service import LLMService
from app.models.user import User
from app.models.queue import Queue
from app.models.database import get_db

logger = logging.getLogger(__name__)


class CommandAnalyzer:
    def __init__(self, llm_service: LLMService):
        self.llm_service = llm_service
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
        self.conversation_context = {}
        
    async def analyze_text(self, text: str, user_id: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            text_lower = text.lower().strip()
            chat_id = str(user_id)
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text[:50]}...")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–±—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å)
            exact_match = self._check_exact_matches(text_lower)
            if exact_match and exact_match.get("confidence", 0) > 0.8:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {exact_match['command']}")
                return exact_match

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            context_match = self._check_context_continuation(chat_id, text_lower)
            if context_match:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: {context_match['command']}")
                return context_match

            # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é LLM
            task_intent = await self._analyze_task_creation_intent(text, chat_id)
            if task_intent and task_intent.get("wants_to_create_task", False):
                logger.info(f"LLM –æ–ø—Ä–µ–¥–µ–ª–∏–ª –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: {task_intent}")
                return task_intent

            # 4. Fallback –∞–Ω–∞–ª–∏–∑ —Å —ç–≤—Ä–∏—Å—Ç–∏–∫–∞–º–∏
            fallback_result = self._fallback_analysis(text_lower, chat_id)
            logger.info(f"Fallback –∞–Ω–∞–ª–∏–∑: {fallback_result['command']}")
            return fallback_result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            return self._create_unknown_response()

    def _check_exact_matches(self, text: str) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
        
        # Core-—Ñ—É–Ω–∫—Ü–∏—è: –î–∞–π–¥–∂–µ—Å—Ç—ã (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        digest_patterns = [
            r'\b(–¥–∞–π–¥–∂–µ—Å—Ç|–æ—Ç—á–µ—Ç|—Å–≤–æ–¥–∫–∞|—Å—Ç–∞—Ç—É—Å|—á—Ç–æ —Å–¥–µ–ª–∞–Ω–æ|–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏|–ø–æ–∫–∞–∂–∏ —Ä–∞–±–æ—Ç—É|–æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º)\b',
            r'\b(–∫–∞–∫ –¥–µ–ª–∞|—á—Ç–æ –Ω–æ–≤–æ–≥–æ|–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è|–∏–∑–º–µ–Ω–µ–Ω–∏—è)\b'
        ]
        
        # Beta-—Ñ—É–Ω–∫—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
        create_task_patterns = [
            r'\b(—Å–æ–∑–¥–∞–π|—Å–æ–∑–¥–∞—Ç—å|–¥–æ–±–∞–≤—å|–¥–æ–±–∞–≤–∏—Ç—å)\s+(–∑–∞–¥–∞—á—É|—Ç–∏–∫–µ—Ç|issue)\b',
            r'\b(–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞|–Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç)\b'
        ]
        
        # Beta-—Ñ—É–Ω–∫—Ü–∏—è: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule_patterns = [
            r'\b(—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ|–≤—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞|–∫–æ–≥–¥–∞ –¥–∞–π–¥–∂–µ—Å—Ç|–∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è)\b',
            r'\b(—É—Å—Ç–∞–Ω–æ–≤–∏|–ø–æ—Å—Ç–∞–≤—å)\s+(–≤—Ä–µ–º—è|—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)\b'
        ]
        
        # Core-—Ñ—É–Ω–∫—Ü–∏—è: –û—á–µ—Ä–µ–¥–∏
        queues_patterns = [
            r'\b(–æ—á–µ—Ä–µ–¥–∏|—Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π|–ø–æ–∫–∞–∂–∏ –æ—á–µ—Ä–µ–¥–∏|–¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏|–∫–∞–∫–∏–µ –æ—á–µ—Ä–µ–¥–∏)\b',
            r'\b(–ø—Ä–æ–µ–∫—Ç—ã|—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤)\b'
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç (core-—Ñ—É–Ω–∫—Ü–∏—è)
        for pattern in digest_patterns:
            if re.search(pattern, text):
                return {
                    "command": "send_digest",
                    "confidence": 0.95,
                    "needs_clarification": False,
                    "feature_status": "core",
                    "data": {},
                    "clarification_questions": []
                }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (beta-—Ñ—É–Ω–∫—Ü–∏—è)
        for pattern in create_task_patterns:
            if re.search(pattern, text):
                return {
                    "command": "create_task",
                    "confidence": 0.85,
                    "needs_clarification": True,
                    "feature_status": "beta",
                    "data": {},
                    "clarification_questions": [
                        "ü§ñ Beta-—Ñ—É–Ω–∫—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á\n"
                        "–í –∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É?\n"
                        "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
                    ]
                }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (beta-—Ñ—É–Ω–∫—Ü–∏—è)
        for pattern in schedule_patterns:
            if re.search(pattern, text):
                return {
                    "command": "set_schedule",
                    "confidence": 0.8,
                    "needs_clarification": True,
                    "feature_status": "beta",
                    "data": {},
                    "clarification_questions": [
                        "‚è∞ Beta-—Ñ—É–Ω–∫—Ü–∏—è: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
                        "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç? (—Ñ–æ—Ä–º–∞—Ç HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 09:00)"
                    ]
                }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏ (core-—Ñ—É–Ω–∫—Ü–∏—è)
        for pattern in queues_patterns:
            if re.search(pattern, text):
                return {
                    "command": "show_queues",
                    "confidence": 0.9,
                    "needs_clarification": False,
                    "feature_status": "core",
                    "data": {},
                    "clarification_questions": []
                }

        return None

    def _check_context_continuation(self, chat_id: str, text: str) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if chat_id not in self.conversation_context:
            return None
            
        context = self.conversation_context[chat_id]
        last_command = context.get("last_command")
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ create_task, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if last_command == "create_task" and len(text.split()) > 3:
            return {
                "command": "create_task",
                "confidence": 0.7,
                "needs_clarification": False,
                "feature_status": "beta",
                "data": {"description": text},
                "clarification_questions": []
            }
            
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ set_schedule, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        if last_command == "set_schedule":
            time_match = re.search(r'(\d{1,2}):(\d{2})', text)
            if time_match:
                return {
                    "command": "set_schedule",
                    "confidence": 0.8,
                    "needs_clarification": False,
                    "feature_status": "beta",
                    "data": {"time": f"{time_match.group(1)}:{time_match.group(2)}"},
                    "clarification_questions": []
                }
        
        return None

    def _fallback_analysis(self, text: str, chat_id: str) -> Dict[str, Any]:
        """Fallback –∞–Ω–∞–ª–∏–∑ —Å —ç–≤—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
        
        # –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ 1: –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if re.search(r'\d{1,2}:\d{2}', text):
            return {
                "command": "set_schedule",
                "confidence": 0.6,
                "needs_clarification": False,
                "feature_status": "beta",
                "data": {},
                "clarification_questions": []
            }
        
        # –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ 2: –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if len(text.split()) > 5 and any(word in text for word in ['–±–∞–≥', '–æ—à–∏–±–∫–∞', '–∏—Å–ø—Ä–∞–≤–∏—Ç—å', '–¥–æ–±–∞–≤–∏—Ç—å', '—Å–¥–µ–ª–∞—Ç—å']):
            return {
                "command": "create_task",
                "confidence": 0.5,
                "needs_clarification": True,
                "feature_status": "beta",
                "data": {},
                "clarification_questions": [
                    "ü§ñ Beta-—Ñ—É–Ω–∫—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á\n"
                    "–ü–æ—Ö–æ–∂–µ, –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É. –í –∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏?"
                ]
            }
        
        # –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ 3: –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        if len(text.split()) <= 3 and any(word in text for word in ['—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–≥–¥–µ']):
            return {
                "command": "send_digest",
                "confidence": 0.4,
                "needs_clarification": False,
                "feature_status": "core",
                "data": {},
                "clarification_questions": []
            }
        
        return self._create_unknown_response()

    def _create_unknown_response(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        return {
            "command": "unknown",
            "confidence": 0.3,
            "needs_clarification": True,
            "feature_status": "unknown",
            "data": {},
            "clarification_questions": [
                "‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "üìä /send_now - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç (core-—Ñ—É–Ω–∫—Ü–∏—è)\n"
                "üìã /create_task - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É (beta-—Ñ—É–Ω–∫—Ü–∏—è)\n"
                "‚è∞ /set_schedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (beta-—Ñ—É–Ω–∫—Ü–∏—è)\n"
                "üìÅ /show_available_queues - –ø–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏ (core-—Ñ—É–Ω–∫—Ü–∏—è)\n"
                "‚ùì /help - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"
            ]
        }

    def update_context(self, chat_id: str, command: str, data: Dict[str, Any] = None):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if chat_id not in self.conversation_context:
            self.conversation_context[chat_id] = {}
        
        self.conversation_context[chat_id].update({
            "last_command": command,
            "last_data": data or {},
            "timestamp": time.time()
        })

    def get_clarification_questions(self, command: str, feature_status: str = "core") -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ —Ñ—É–Ω–∫—Ü–∏–∏"""
        base_questions = {
            "create_task": [
                "ü§ñ Beta-—Ñ—É–Ω–∫—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á\n"
                "–í –∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É?\n"
                "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
            ],
            "set_schedule": [
                "‚è∞ Beta-—Ñ—É–Ω–∫—Ü–∏—è: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
                "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç? (—Ñ–æ—Ä–º–∞—Ç HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 09:00)"
            ],
            "unknown": [
                "‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "üìä /send_now - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç (core-—Ñ—É–Ω–∫—Ü–∏—è)\n"
                "üìã /create_task - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É (beta-—Ñ—É–Ω–∫—Ü–∏—è)\n"
                "‚è∞ /set_schedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (beta-—Ñ—É–Ω–∫—Ü–∏—è)\n"
                "üìÅ /show_available_queues - –ø–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏ (core-—Ñ—É–Ω–∫—Ü–∏—è)\n"
                "‚ùì /help - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"
            ]
        }
        
        return base_questions.get(command, ["–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."])

    async def _analyze_task_creation_intent(self, text: str, chat_id: str) -> Optional[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é LLM"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            if not user:
                return None
            
            user_queues = db.query(Queue).filter(Queue.user_id == user.id).all()
            available_queues = [queue.queue_key for queue in user_queues]
            
            if not available_queues:
                return None
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é LLM
            intent_result = await self.llm_service.analyze_task_creation_intent(text, available_queues)
            
            if intent_result.get("wants_to_create_task", False):
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ
                text_refactoring = intent_result.get("text_refactoring", {})
                extracted_data = intent_result.get("extracted_data", {})
                
                if intent_result.get("has_sufficient_data", False):
                    # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö - —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å—Ä–∞–∑—É
                    return {
                        "command": "create_task",
                        "confidence": intent_result.get("confidence", 0.8),
                        "needs_clarification": False,
                        "feature_status": "beta",
                        "data": {
                            **extracted_data,
                            "refactored_text": text_refactoring.get("improved", text),
                            "original_text": text_refactoring.get("original", text),
                            "refactoring_changes": text_refactoring.get("changes", [])
                        },
                        "clarification_questions": []
                    }
                else:
                    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è
                    missing_data = intent_result.get("missing_data", [])
                    clarification_text = "ü§ñ Beta-—Ñ—É–Ω–∫—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á\n"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if text_refactoring.get("improved") and text_refactoring.get("improved") != text:
                        clarification_text += f"üí° –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {text_refactoring['improved']}\n\n"
                    
                    if missing_data:
                        clarification_text += f"–ù–µ–¥–æ—Å—Ç–∞–µ—Ç: {', '.join(missing_data)}\n"
                    clarification_text += "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
                    
                    return {
                        "command": "create_task",
                        "confidence": intent_result.get("confidence", 0.7),
                        "needs_clarification": True,
                        "feature_status": "beta",
                        "data": {
                            **extracted_data,
                            "refactored_text": text_refactoring.get("improved", text),
                            "original_text": text_refactoring.get("original", text),
                            "refactoring_changes": text_refactoring.get("changes", [])
                        },
                        "clarification_questions": [clarification_text]
                    }
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return None 