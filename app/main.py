"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from app.config import settings
from app.infrastructure.database.models import engine, Base
from app.tg_bot.bot import TelegramBot
from app.scheduler.digest_scheduler import DigestScheduler
from app.services.llm_service import LLMService
from app.services.tracker_service import TrackerService
from app.infrastructure.database.user_model import User
from app.infrastructure.database.queue_model import Queue
from app.infrastructure.database.digest_log_model import DigestLog
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    logger.info("üóÑÔ∏è –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    Base.metadata.create_all(bind=engine)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Å–µ—Ä–≤–∏—Å—ã...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
    tracker_service = TrackerService(
        token=settings.YANDEX_TRACKER_TOKEN,
        org_id=settings.YANDEX_ORG_ID
    )
    llm_service = LLMService()
    await llm_service.ensure_llm_models()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
    bot = TelegramBot()
    # Polling –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º telegram-bot
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = DigestScheduler(bot)
    scheduler.start()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ app.state –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π
    app.state.tracker_service = tracker_service
    app.state.llm_service = llm_service
    app.state.scheduler = scheduler
    app.state.bot = bot
    
    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    await scheduler.stop()
    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="AI-Tracker API",
    description="API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex Tracker —á–µ—Ä–µ–∑ AI",
    version="2.0.0",
    lifespan=lifespan
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "AI-Tracker API",
        "version": "2.0.0",
        "status": "running"
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
        llm_service = app.state.llm_service
        health_status = await llm_service.health_check()
        
        return {
            "status": "healthy",
            "services": {
                "llm": health_status,
                "database": "connected",
                "scheduler": "running"
            }
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(status_code=500, detail="Service unhealthy")


@app.get("/model/status")
async def model_status():
    """–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ LLM"""
    try:
        llm_service = app.state.llm_service
        health_status = await llm_service.health_check()
        
        return {
            "model": settings.OLLAMA_MODEL,
            "provider": settings.LLM_PROVIDER,
            "status": health_status
        }
    except Exception as e:
        logger.error(f"Model status check failed: {e}")
        raise HTTPException(status_code=500, detail="Model status check failed")


if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI-Tracker...")
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 