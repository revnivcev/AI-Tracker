import logging
from datetime import datetime, time
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from app.models.database import get_db
from app.models.user import User
from app.models.queue import Queue
from app.services.tracker_service import TrackerService
from app.services.llm_service import LLMService
from app.core.digest_service import DigestService
from app.config import settings
from app.tg_bot.bot import TelegramBot

logger = logging.getLogger(__name__)


class DigestScheduler:
    def __init__(self, telegram_bot: TelegramBot):
        self.telegram_bot = telegram_bot
        self.scheduler = AsyncIOScheduler()
        
        # –°–æ–∑–¥–∞–µ–º TrackerService —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.tracker_service = TrackerService(
            token=settings.YANDEX_TRACKER_TOKEN,
            org_id=settings.YANDEX_ORG_ID,
            cloud_org_id=settings.YANDEX_CLOUD_ORG_ID
        )
        
        self.digest_service = DigestService(
            self.tracker_service,
            LLMService()
        )

    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ 9:00
        self.scheduler.add_job(
            self._send_daily_digest,
            CronTrigger(hour=9, minute=0),
            id="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç",
            name="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ 9:00"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self._load_user_schedules()

    def _load_user_schedules(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...")
            db = next(get_db())
            users = db.query(User).filter(User.digest_schedule.isnot(None)).all()
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º")
            
            for user in users:
                try:
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    time_parts = user.digest_schedule.split(':')
                    hour = int(time_parts[0])
                    minute = int(time_parts[1])
                    
                    logger.info(f"–î–æ–±–∞–≤–ª—è—é –¥–∂–æ–± –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.chat_id} –≤ {hour}:{minute:02d}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    job_id = f"user_digest_{user.chat_id}"
                    self.scheduler.add_job(
                        self._send_user_digest,
                        CronTrigger(hour=hour, minute=minute),
                        args=[user.chat_id],
                        id=job_id,
                        name=f"–î–∞–π–¥–∂–µ—Å—Ç –¥–ª—è {user.chat_id} –≤ {hour}:{minute:02d}",
                        replace_existing=True
                    )
                    
                    logger.info(f"‚úÖ –î–∂–æ–± {job_id} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è chat_id {user.chat_id}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∂–æ–±–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.chat_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
    
    def update_user_schedule(self, chat_id: str, digest_schedule: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è chat_id {chat_id} –Ω–∞ –≤—Ä–µ–º—è {digest_schedule}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if user:
                user.digest_schedule = digest_schedule
                db.commit()
                logger.info(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –±–∞–∑–µ –¥–ª—è chat_id {chat_id}")
            else:
                logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
            time_parts = digest_schedule.split(':')
            hour = int(time_parts[0])
            minute = int(time_parts[1])
            
            job_id = f"user_digest_{chat_id}"
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                self.scheduler.remove_job(job_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –¥–∂–æ–± {job_id}")
            except:
                pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            self.scheduler.add_job(
                self._send_user_digest,
                CronTrigger(hour=hour, minute=minute),
                args=[chat_id],
                id=job_id,
                name=f"–î–∞–π–¥–∂–µ—Å—Ç –¥–ª—è {chat_id} –≤ {hour}:{minute:02d}",
                replace_existing=True
            )
            
            logger.info(f"‚úÖ –ù–æ–≤—ã–π –¥–∂–æ–± {job_id} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è chat_id {chat_id} –≤ {hour}:{minute:02d}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {chat_id}: {e}")
            return False
    
    async def _send_daily_digest(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        logger.info("üïò –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ 9:00")
        
        try:
            db = next(get_db())
            users = db.query(User).all()
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
            for user in users:
                try:
                    await self._send_digest_to_user(user.chat_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.chat_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
    
    async def _send_user_digest(self, chat_id: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        logger.info(f"üïò –ó–∞–ø—É—Å–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        
        try:
            await self._send_digest_to_user(chat_id)
            logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
    
    async def _send_digest_to_user(self, chat_id: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                return
            
            user_queues = db.query(Queue).filter(Queue.user_id == user.id).all()
            
            if not user_queues:
                logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π")
                return
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(user_queues)} –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –æ—á–µ—Ä–µ–¥–∏
            for queue in user_queues:
                try:
                    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue.queue_key}")
                    
                    digest = await self.digest_service.generate_digest(
                        user_id=user.id,
                        queue_key=queue.queue_key,
                        since_hours=24
                    )
                    
                    if digest:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
                        await self.telegram_bot.application.bot.send_message(
                            chat_id=chat_id,
                            text=digest,
                            parse_mode='HTML'
                        )
                        logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue.queue_key}")
                    else:
                        logger.warning(f"–ü—É—Å—Ç–æ–π –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue.queue_key}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue.queue_key}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
    
    def get_jobs_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∑–∞–¥–∞—á–∞—Ö"""
        jobs = self.scheduler.get_jobs()
        logger.info(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {len(jobs)}")
        
        for job in jobs:
            logger.info(f"–î–∂–æ–±: {job.id} - {job.name} - –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {job.next_run_time}")
        
        return jobs
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...")
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") 