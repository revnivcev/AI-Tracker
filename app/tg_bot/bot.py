import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from app.config import settings
from app.services.tracker_service import TrackerService
from app.services.llm_service import LLMService
from app.services.command_analyzer import CommandAnalyzer
from app.core.digest_service import DigestService
from app.models.database import get_db
from app.models.user import User
from app.models.queue import Queue
from typing import Dict, Any, List

logger = logging.getLogger(__name__)

logger.info("=== TELEGRAM BOT MODULE LOADED ===")


class TelegramBot:
    def __init__(self):
        logger.info("=== TELEGRAM BOT INIT STARTED ===")
        self.scheduler = None
        if settings.DEMO_MODE:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –≤ –î–ï–ú–û-—Ä–µ–∂–∏–º–µ - Telegram –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
            self.demo_mode = True
            return
            
        if not settings.TELEGRAM_BOT_TOKEN or settings.TELEGRAM_BOT_TOKEN == "your_telegram_bot_token_here":
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DEMO_MODE=true –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        logger.info("=== APPLICATION BUILT ===")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.tracker_service = TrackerService(
            token=settings.YANDEX_TRACKER_TOKEN,
            org_id=settings.YANDEX_ORG_ID,
            cloud_org_id=settings.YANDEX_CLOUD_ORG_ID
        )
        self.llm_service = LLMService()
        self.command_analyzer = CommandAnalyzer(self.llm_service)
        self.digest_service = DigestService(self.tracker_service, self.llm_service)
        self.demo_mode = False
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        logger.info("=== TELEGRAM BOT INIT COMPLETED ===")

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        logger.info("=== REGISTERING HANDLERS ===")
        
        self.application.add_handler(CommandHandler("start", self.start_command))
        logger.info("Registered: start_command")
        
        self.application.add_handler(CommandHandler("add_queue", self.add_queue_command))
        logger.info("Registered: add_queue_command")
        
        self.application.add_handler(CommandHandler("remove_queue", self.remove_queue_command))
        logger.info("Registered: remove_queue_command")
        
        self.application.add_handler(CommandHandler("list_queues", self.list_queues_command))
        logger.info("Registered: list_queues_command")
        
        self.application.add_handler(CommandHandler("show_available_queues", self.show_available_queues_command))
        logger.info("Registered: show_available_queues_command")
        
        self.application.add_handler(CommandHandler("set_schedule", self.set_schedule_command))
        logger.info("Registered: set_schedule_command")
        
        self.application.add_handler(CommandHandler("send_now", self.send_now_command))
        logger.info("Registered: send_now_command")
        

        

        
        self.application.add_handler(CommandHandler("help", self.help_command))
        logger.info("Registered: help_command")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–ï–î MessageHandler!)
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        logger.info("Registered: CallbackQueryHandler")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        logger.info("Registered: MessageHandler")
        

        
        logger.info("=== ALL HANDLERS REGISTERED ===")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = str(update.effective_chat.id)
        
        try:
            db = next(get_db())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User(
                    chat_id=chat_id,
                    tracker_token=settings.YANDEX_TRACKER_TOKEN,
                    org_id=settings.YANDEX_ORG_ID
                )
                db.add(user)
                db.commit()
                
                await update.message.reply_text(
                    "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-Tracker!\n\n"
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á–∞—Ö –Ø–Ω–¥–µ–∫—Å –¢—Ä–µ–∫–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã.\n\n"
                    "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/show_available_queues - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏\n"
                    "/add_queue <–∫–ª—é—á> - –¥–æ–±–∞–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
                    "/list_queues - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –æ—á–µ—Ä–µ–¥–∏\n"
                    "/send_now - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å–µ–π—á–∞—Å\n"
                    "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                )
            else:
                await update.message.reply_text(
                    "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    async def add_queue_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_queue"""
        chat_id = str(update.effective_chat.id)
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –æ—á–µ—Ä–µ–¥–∏.\n"
                "–ü—Ä–∏–º–µ—Ä: /add_queue TEST"
            )
            return
        
        queue_key = context.args[0].upper()
        
        # –ú–ì–ù–û–í–ï–ù–ù–´–ô –û–¢–í–ï–¢ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
        processing_msg = await update.message.reply_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –æ—á–µ—Ä–µ–¥—å {queue_key}...")
        
        try:
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                await processing_msg.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—á–µ—Ä–µ–¥—å
            await processing_msg.edit_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—á–µ—Ä–µ–¥–∏ {queue_key}...")
            queues = self.tracker_service.get_queues()
            queue_exists = any(q['key'] == queue_key for q in queues)
            
            if not queue_exists:
                await processing_msg.edit_text(f"‚ùå –û—á–µ—Ä–µ–¥—å {queue_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –æ—á–µ—Ä–µ–¥—å
            await processing_msg.edit_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –æ—á–µ—Ä–µ–¥—å {queue_key}...")
            existing_queue = db.query(Queue).filter(
                Queue.user_id == user.id,
                Queue.queue_key == queue_key
            ).first()
            
            if existing_queue:
                await processing_msg.edit_text(f"‚ùå –û—á–µ—Ä–µ–¥—å {queue_key} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
            await processing_msg.edit_text(f"‚ûï –î–æ–±–∞–≤–ª—è—é –æ—á–µ—Ä–µ–¥—å {queue_key}...")
            queue = Queue(
                user_id=user.id,
                queue_key=queue_key,
                queue_name=next((q['name'] for q in queues if q['key'] == queue_key), queue_key)
            )
            db.add(queue)
            db.commit()
            
            await processing_msg.edit_text(f"‚úÖ –û—á–µ—Ä–µ–¥—å {queue_key} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ add_queue_command: {e}")
            await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏.")

    async def list_queues_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_queues"""
        chat_id = str(update.effective_chat.id)
        
        try:
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            queues = db.query(Queue).filter(Queue.user_id == user.id).all()
            
            if not queues:
                await update.message.reply_text(
                    "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_queue <–∫–ª—é—á> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."
                )
                return
            
            message = "üìã –í–∞—à–∏ –æ—á–µ—Ä–µ–¥–∏:\n\n"
            for queue in queues:
                message += f"‚Ä¢ {queue.queue_key} - {queue.queue_name}\n"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ list_queues_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π.")

    async def send_now_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_now"""
        chat_id = str(update.effective_chat.id)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_queues = db.query(Queue).filter(Queue.user_id == user.id).all()
            if not user_queues:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.\n"
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ—á–µ—Ä–µ–¥–∏ —Å –ø–æ–º–æ—â—å—é /add_queue <–∫–ª—é—á>"
                )
                return
            
            # –ú–ì–ù–û–í–ï–ù–ù–´–ô –û–¢–í–ï–¢ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            processing_msg = await update.message.reply_text("üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–π–¥–∂–µ—Å—Ç...")
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            async def update_status(status: str):
                await processing_msg.edit_text(status)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π
            all_digests = []
            for queue in user_queues:
                try:
                    digest = await self.digest_service.generate_digest(
                        user.id, 
                        queue.queue_key, 
                        since_hours=24,
                        status_callback=update_status
                    )
                    if digest:
                        all_digests.append(digest)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue.queue_key}: {e}")
                    all_digests.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue.queue_key}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã
            if all_digests:
                for digest in all_digests:
                    await update.message.reply_text(digest, parse_mode='HTML')
                await processing_msg.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            else:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ send_now_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞.")



    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message:
            logger.error("update.message is None")
            return
            
        chat_id = str(update.effective_chat.id)
        text = update.message.text.strip()
        
        try:
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_queues = db.query(Queue).filter(Queue.user_id == user.id).all()
            if not user_queues:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.\n"
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ—á–µ—Ä–µ–¥–∏ —Å –ø–æ–º–æ—â—å—é /add_queue <–∫–ª—é—á>"
                )
                return
            
            # –ú–ì–ù–û–í–ï–ù–ù–´–ô –û–¢–í–ï–¢ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            processing_msg = await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
            available_queues = [q.queue_key for q in user_queues]
            priorities = self.tracker_service.get_priorities()
            available_priorities = [p['display'] for p in priorities] if priorities else ["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            analysis = await self.llm_service.analyze_free_conversation(
                user_message=text,
                available_queues=available_queues,
                available_priorities=available_priorities,
                user_context=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.chat_id}, –û—á–µ—Ä–µ–¥–∏: {available_queues}"
            )
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è: {analysis}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            intent = analysis.get('intent', 'unknown')
            action = analysis.get('action', 'help')
            response = analysis.get('response', '–ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ')
            data = analysis.get('data', {})
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"Intent: {intent}, Action: {action}")
            logger.info(f"Task data: {data.get('task_data', {})}")
            logger.info(f"Queue key: {data.get('queue_key')}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            await processing_msg.edit_text(response)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            if action == 'create_task':
                task_data = data.get('task_data', {})
                queue_key = data.get('queue_key')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                if task_data.get('summary'):
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    await self._create_task_from_analysis(update, task_data, queue_key)
                else:
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    await update.message.reply_text(
                        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ:\n"
                        "‚Ä¢ –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?\n"
                        "‚Ä¢ –ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è?\n"
                        "‚Ä¢ –ï—Å—Ç—å –ª–∏ —Å—Ä–æ–∫–∏?\n"
                        "‚Ä¢ –ö—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å?"
                    )
            
            elif action == 'show_digest':
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
                await self._show_digest_for_user(update, user, available_queues)
            
            elif action == 'set_schedule':
                schedule_time = data.get('schedule_time')
                if schedule_time:
                    await self._set_schedule_from_analysis(update, user, schedule_time)
                else:
                    await update.message.reply_text(
                        "‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (UTC)\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00 (–±—É–¥–µ—Ç 12:00 –ú–°–ö)"
                    )
            
            elif action == 'help':
                await self.help_command(update, context)
            
            else:
                # –û–±—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π
                await update.message.reply_text(
                    "ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
                    "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç\n"
                    "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
                    "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def _create_task_from_analysis(self, update: Update, task_data: Dict[str, Any], queue_key: str):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            summary = task_data.get('summary', '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞')
            description = task_data.get('description', summary)
            assignee = task_data.get('assignee')
            priority = task_data.get('priority', '–°—Ä–µ–¥–Ω–∏–π')
            deadline = task_data.get('deadline')
            
            # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            if not queue_key:
                db = next(get_db())
                user = db.query(User).filter(User.chat_id == str(update.effective_chat.id)).first()
                if user:
                    user_queues = db.query(Queue).filter(Queue.user_id == user.id).all()
                    if user_queues:
                        queue_key = user_queues[0].queue_key
            
            if not queue_key:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∑–∞–¥–∞—á–∏. –î–æ–±–∞–≤—å—Ç–µ –æ—á–µ—Ä–µ–¥—å —Å –ø–æ–º–æ—â—å—é /add_queue")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Yandex Tracker
            created_issue = self.tracker_service.create_issue(
                queue_key=queue_key,
                summary=summary,
                description=description,
                assignee=assignee,
                priority=priority
            )
            
            if created_issue:
                success_text = f"""
‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üîó {created_issue['key']}: {created_issue['summary']}
üìÇ –û—á–µ—Ä–µ–¥—å: {created_issue['queue']}
üìä –°—Ç–∞—Ç—É—Å: {created_issue['status']}
üåê –°—Å—ã–ª–∫–∞: {created_issue['url']}
"""
                
                if deadline:
                    success_text += f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline}\n"
                
                success_text += "\n–ó–∞–¥–∞—á–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ"
                
                await update.message.reply_text(success_text)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ Yandex Tracker.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")

    async def _show_digest_for_user(self, update: Update, user: User, available_queues: List[str]):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π –æ—á–µ—Ä–µ–¥–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤—ã–±–æ—Ä)
            if available_queues:
                queue_key = available_queues[0]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                processing_msg = await update.message.reply_text("üìä –§–æ—Ä–º–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç...")
                
                async def update_status(status: str):
                    await processing_msg.edit_text(f"üìä {status}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
                digest = await self.digest_service.generate_digest(
                    user_id=user.id,
                queue_key=queue_key,
                    since_hours=24,
                    status_callback=update_status
                )
                
                if digest:
                    await processing_msg.edit_text(digest, parse_mode='HTML')
                else:
                    await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç.")
            else:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞.")

    async def _set_schedule_from_analysis(self, update: Update, user: User, schedule_time: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ
            user.digest_schedule = schedule_time
            db = next(get_db())
            db.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if hasattr(self, 'scheduler') and self.scheduler:
                self.scheduler.update_user_schedule(user.chat_id, schedule_time)
            
            await update.message.reply_text(
                f"‚è∞ –í—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {schedule_time} UTC (–ú—Å–∫ -3). "
                "–î–∞–π–¥–∂–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è."
            )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
        logger.info("=== CALLBACK HANDLER CALLED ===")
        logger.info(f"=== UPDATE TYPE: {type(update)} ===")
        logger.info(f"=== UPDATE: {update} ===")
        
        try:
            query = update.callback_query
            chat_id = str(query.message.chat.id) if query.message else 'unknown'
            logger.info(f"handle_callback: chat_id={chat_id}, data={query.data}, user_data={context.user_data}")
            await query.answer()
            
            if query.data.startswith("create_in_"):
                queue_key = query.data.replace("create_in_", "")
                context.user_data['selected_queue'] = queue_key
                context.user_data['creating_issue'] = True
                logger.info(f"handle_callback: set selected_queue={queue_key}, creating_issue=True for chat_id={chat_id}")
                
                await query.edit_message_text(
                    f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ {queue_key}\n\n"
                    "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'"
                )
                logger.info(f"handle_callback: sent message asking for task description")
            else:
                logger.info(f"handle_callback: unknown callback data: {query.data}")
                
        except Exception as e:
            logger.error(f"handle_callback: ERROR: {e}")
            logger.error(f"handle_callback: update={update}")
            logger.error(f"handle_callback: context={context}")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ <b>AI-Tracker</b> - –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞–±–æ—Ç–µ —Å Yandex Tracker

üìä <b>Core-—Ñ—É–Ω–∫—Ü–∏–∏ (—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ):</b>
‚Ä¢ <code>/send_now</code> - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å–µ–π—á–∞—Å
‚Ä¢ <code>/show_available_queues</code> - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
‚Ä¢ <code>/add_queue &lt;–∫–ª—é—á&gt;</code> - –î–æ–±–∞–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
‚Ä¢ <code>/list_queues</code> - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –æ—á–µ—Ä–µ–¥–∏
‚Ä¢ <code>/set_schedule HH:MM</code> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–≤—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ UTC, –ú—Å–∫ -3)

ü§ñ <b>Beta-—Ñ—É–Ω–∫—Ü–∏–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):</b>
‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥"
‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: "—É—Å—Ç–∞–Ω–æ–≤–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 10:00"
‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: "–ø–æ–∫–∞–∂–∏ –¥–∞–π–¥–∂–µ—Å—Ç"

üìù <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>

<b>Core-—Ñ—É–Ω–∫—Ü–∏–∏:</b>
<code>
/send_now
/show_available_queues
/add_queue TEST
/set_schedule 09:00
</code>

<b>Beta-—Ñ—É–Ω–∫—Ü–∏–∏ (—Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç):</b>
<code>
–ø–æ–∫–∞–∂–∏ –¥–∞–π–¥–∂–µ—Å—Ç
—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
—É—Å—Ç–∞–Ω–æ–≤–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 19:30
–ø–æ–∫–∞–∂–∏ –æ—á–µ—Ä–µ–¥–∏
</code>

‚è∞ <b>–í–∞–∂–Ω–æ:</b> –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ UTC (–ú–æ—Å–∫–≤–∞ -3 —á–∞—Å–∞)
‚Ä¢ 09:00 UTC = 12:00 –ú–°–ö
‚Ä¢ 18:00 UTC = 21:00 –ú–°–ö

üîß <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @mokyzzzee
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ issues –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ Core-—Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
‚Ä¢ Beta-—Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–π
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º - –ò–ò —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è!
"""
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def set_schedule_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_schedule <HH:MM>"""
        chat_id = str(update.effective_chat.id)
        if not context.args or len(context.args[0]) != 5 or ':' not in context.args[0]:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM. –ü—Ä–∏–º–µ—Ä: /set_schedule 09:30")
            return
        schedule_time = context.args[0]
        try:
            hour, minute = map(int, schedule_time.split(':'))
            if not (0 <= hour < 24 and 0 <= minute < 60):
                raise ValueError
        except Exception:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: /set_schedule 09:30")
            return
        try:
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            if not user:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            user.digest_schedule = schedule_time
            db.commit()
            # –í—ã–∑–æ–≤–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if hasattr(self, 'scheduler') and self.scheduler:
                self.scheduler.update_user_schedule(user.chat_id, schedule_time)
            await update.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {schedule_time} UTC (–ú—Å–∫ -3). –î–∞–π–¥–∂–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_schedule_command: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def remove_queue_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_queue"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        await update.message.reply_text("üóëÔ∏è –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")

    async def show_available_queues_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /show_available_queues"""
        chat_id = str(update.effective_chat.id)
        
        try:
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            queues = self.tracker_service.get_queues()
            
            if not queues:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –≤ Yandex Tracker.")
                return
            
            message = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏:\n\n"
            for queue in queues:
                message += f"‚Ä¢ {queue['key']} - {queue['name']}\n"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_available_queues_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.")



    def run_polling(self):
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling(allowed_updates=["message", "callback_query"])

    async def send_status(self, update: Update, message: str, edit_message=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã"""
        try:
            if edit_message:
                await edit_message.edit_text(message)
            else:
                await update.message.reply_text(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def send_processing_status(self, update: Update, status: str, edit_message=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —ç–º–æ–¥–∑–∏"""
        status_emoji = {
            "analyzing": "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...",
            "creating": "üîÑ –°–æ–∑–¥–∞—é...",
            "transcribing": "üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é...",
            "fetching": "üì° –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ...",
            "processing": "‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...",
            "sending": "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é..."
        }
        
        emoji_text = status_emoji.get(status, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        await self.send_status(update, emoji_text, edit_message) 