import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from app.config import settings
from app.services.tracker_service import TrackerService
from app.services.llm_service import LLMService
from app.services.whisper_service import WhisperService
from app.services.command_analyzer import CommandAnalyzer
from app.core.digest_service import DigestService
from app.models.database import get_db
from app.models.user import User
from app.models.queue import Queue
from typing import Dict, Any

logger = logging.getLogger(__name__)

logger.info("=== TELEGRAM BOT MODULE LOADED ===")


class TelegramBot:
    def __init__(self):
        logger.info("=== TELEGRAM BOT INIT STARTED ===")
        self.scheduler = None
        if settings.DEMO_MODE:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –≤ –î–ï–ú–û-—Ä–µ–∂–∏–º–µ - Telegram –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
            self.demo_mode = True
            return
            
        if not settings.TELEGRAM_BOT_TOKEN or settings.TELEGRAM_BOT_TOKEN == "your_telegram_bot_token_here":
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DEMO_MODE=true –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        logger.info("=== APPLICATION BUILT ===")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.tracker_service = TrackerService(
            token=settings.YANDEX_TRACKER_TOKEN,
            org_id=settings.YANDEX_ORG_ID,
            cloud_org_id=settings.YANDEX_CLOUD_ORG_ID
        )
        self.llm_service = LLMService()
        self.whisper_service = WhisperService(settings.WHISPER_BASE_URL)
        self.command_analyzer = CommandAnalyzer(self.llm_service)
        self.digest_service = DigestService(self.tracker_service, self.llm_service)
        self.demo_mode = False
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        logger.info("=== TELEGRAM BOT INIT COMPLETED ===")

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        logger.info("=== REGISTERING HANDLERS ===")
        
        self.application.add_handler(CommandHandler("start", self.start_command))
        logger.info("Registered: start_command")
        
        self.application.add_handler(CommandHandler("add_queue", self.add_queue_command))
        logger.info("Registered: add_queue_command")
        
        self.application.add_handler(CommandHandler("remove_queue", self.remove_queue_command))
        logger.info("Registered: remove_queue_command")
        
        self.application.add_handler(CommandHandler("list_queues", self.list_queues_command))
        logger.info("Registered: list_queues_command")
        
        self.application.add_handler(CommandHandler("show_available_queues", self.show_available_queues_command))
        logger.info("Registered: show_available_queues_command")
        
        self.application.add_handler(CommandHandler("set_schedule", self.set_schedule_command))
        logger.info("Registered: set_schedule_command")
        
        self.application.add_handler(CommandHandler("send_now", self.send_now_command))
        logger.info("Registered: send_now_command")
        
        self.application.add_handler(CommandHandler("create_task", self.create_task_command))
        logger.info("Registered: create_task_command")
        
        self.application.add_handler(CommandHandler("create", self.create_issue_command))
        logger.info("Registered: create_issue_command")
        
        self.application.add_handler(CommandHandler("help", self.help_command))
        logger.info("Registered: help_command")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–ï–î MessageHandler!)
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        logger.info("Registered: CallbackQueryHandler")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        logger.info("Registered: MessageHandler")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        logger.info("Registered: VoiceHandler")
        
        logger.info("=== ALL HANDLERS REGISTERED ===")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = str(update.effective_chat.id)
        
        try:
            db = next(get_db())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User(
                    chat_id=chat_id,
                    tracker_token=settings.YANDEX_TRACKER_TOKEN,
                    org_id=settings.YANDEX_ORG_ID
                )
                db.add(user)
                db.commit()
                
                await update.message.reply_text(
                    "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-Tracker!\n\n"
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á–∞—Ö –Ø–Ω–¥–µ–∫—Å –¢—Ä–µ–∫–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã.\n\n"
                    "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/show_available_queues - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏\n"
                    "/add_queue <–∫–ª—é—á> - –¥–æ–±–∞–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
                    "/list_queues - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –æ—á–µ—Ä–µ–¥–∏\n"
                    "/send_now - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å–µ–π—á–∞—Å\n"
                    "/create_task <–æ–ø–∏—Å–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –ò–ò –∞–Ω–∞–ª–∏–∑ (–ù–û–í–ê–Ø –§–ò–ß–ê!)\n"
                    "/create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
                    "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                )
            else:
                await update.message.reply_text(
                    "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    async def add_queue_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_queue"""
        chat_id = str(update.effective_chat.id)
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –æ—á–µ—Ä–µ–¥–∏.\n"
                "–ü—Ä–∏–º–µ—Ä: /add_queue TEST"
            )
            return
        
        queue_key = context.args[0].upper()
        
        try:
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—á–µ—Ä–µ–¥—å
            queues = self.tracker_service.get_queues()
            queue_exists = any(q['key'] == queue_key for q in queues)
            
            if not queue_exists:
                await update.message.reply_text(f"‚ùå –û—á–µ—Ä–µ–¥—å {queue_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –æ—á–µ—Ä–µ–¥—å
            existing_queue = db.query(Queue).filter(
                Queue.user_id == user.id,
                Queue.queue_key == queue_key
            ).first()
            
            if existing_queue:
                await update.message.reply_text(f"‚ùå –û—á–µ—Ä–µ–¥—å {queue_key} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
            queue = Queue(
                user_id=user.id,
                queue_key=queue_key,
                queue_name=next((q['name'] for q in queues if q['key'] == queue_key), queue_key)
            )
            db.add(queue)
            db.commit()
            
            await update.message.reply_text(f"‚úÖ –û—á–µ—Ä–µ–¥—å {queue_key} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ add_queue_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏.")

    async def list_queues_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_queues"""
        chat_id = str(update.effective_chat.id)
        
        try:
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            queues = db.query(Queue).filter(Queue.user_id == user.id).all()
            
            if not queues:
                await update.message.reply_text(
                    "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_queue <–∫–ª—é—á> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."
                )
                return
            
            message = "üìã –í–∞—à–∏ –æ—á–µ—Ä–µ–¥–∏:\n\n"
            for queue in queues:
                message += f"‚Ä¢ {queue.queue_key} - {queue.queue_name}\n"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ list_queues_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π.")

    async def send_now_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_now"""
        chat_id = str(update.effective_chat.id)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_queues = db.query(Queue).filter(Queue.user_id == user.id).all()
            if not user_queues:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.\n"
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ—á–µ—Ä–µ–¥–∏ —Å –ø–æ–º–æ—â—å—é /add_queue <–∫–ª—é—á>"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text("üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–π–¥–∂–µ—Å—Ç...")
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            async def update_status(status: str):
                await processing_msg.edit_text(status)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π
            all_digests = []
            for queue in user_queues:
                try:
                    digest = await self.digest_service.generate_digest(
                        user.id, 
                        queue.queue_key, 
                        since_hours=24,
                        status_callback=update_status
                    )
                    if digest:
                        all_digests.append(digest)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue.queue_key}: {e}")
                    all_digests.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue.queue_key}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã
            if all_digests:
                for digest in all_digests:
                    await update.message.reply_text(digest, parse_mode='HTML')
                await processing_msg.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            else:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ send_now_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞.")

    async def create_issue_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create"""
        chat_id = str(update.effective_chat.id)
        logger.info(f"create_issue_command: chat_id={chat_id}")
        
        try:
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            queues = db.query(Queue).filter(Queue.user_id == user.id).all()
            logger.info(f"create_issue_command: found {len(queues)} queues for user {user.id}")
            
            if not queues:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.\n"
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ—á–µ—Ä–µ–¥—å —Å –ø–æ–º–æ—â—å—é /add_queue <–∫–ª—é—á>"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            context.user_data['creating_issue'] = True
            context.user_data['available_queues'] = [q.queue_key for q in queues]
            logger.info(f"create_issue_command: set creating_issue=True, available_queues={context.user_data['available_queues']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
            keyboard = []
            for queue in queues:
                keyboard.append([InlineKeyboardButton(queue.queue_key, callback_data=f"create_in_{queue.queue_key}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            logger.info(f"create_issue_command: created keyboard with {len(keyboard)} buttons")
            
            await update.message.reply_text(
                "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ create_issue_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = str(update.effective_chat.id)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text("üé§ –ü–æ–ª—É—á–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self.send_processing_status(update, "fetching", processing_msg)
                voice_file = await context.bot.get_file(update.message.voice.file_id)
                audio_data = await voice_file.download_as_bytearray()
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
                await self.send_processing_status(update, "transcribing", processing_msg)
                transcription = await self.whisper_service.transcribe_audio(audio_data)
                
                if not transcription:
                    await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                await processing_msg.edit_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {transcription}\n\nü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É...")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                await self._process_text_message(update, context, transcription, processing_msg)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_voice: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            text = update.message.text
            chat_id = str(update.effective_chat.id)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text[:50]}...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é CommandAnalyzer
            analysis = await self.command_analyzer.analyze_text(text, int(chat_id))
            command = analysis.get("command", "unknown")
            confidence = analysis.get("confidence", 0.0)
            needs_clarification = analysis.get("needs_clarification", True)
            feature_status = analysis.get("feature_status", "unknown")
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥—ã: {command}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}, —Å—Ç–∞—Ç—É—Å: {feature_status}, –Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è: {needs_clarification}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
            context.user_data['last_analysis_data'] = analysis
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            self.command_analyzer.update_context(chat_id, command, analysis.get("data", {}))
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö
            if needs_clarification:
                clarification_questions = analysis.get("clarification_questions", [])
                if clarification_questions:
                    response = "\n".join(clarification_questions)
                    await update.message.reply_text(response)
                else:
                    await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            if command == "send_digest":
                await self.send_now_command(update, context)
            elif command == "create_task":
                await self.create_task_from_text(update, context, text)
            elif command == "set_schedule":
                await self.set_schedule_from_text(update, context, text)
            elif command == "show_queues":
                await self.show_available_queues_command(update, context)
            else:
                await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def create_task_from_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            chat_id = str(update.effective_chat.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_msg = await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            analysis_data = context.user_data.get('last_analysis_data', {})
            extracted_data = analysis_data.get('data', {})
            
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            if extracted_data and extracted_data.get('summary') and extracted_data.get('description'):
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π: {extracted_data}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                summary = extracted_data.get('refactored_text') or extracted_data.get('summary')
                description = extracted_data.get('description')
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ
                refactoring_changes = extracted_data.get('refactoring_changes', [])
                if refactoring_changes:
                    refactoring_info = f"üí° –£–ª—É—á—à–µ–Ω–∏—è: {', '.join(refactoring_changes[:2])}"
                    await status_msg.edit_text(f"üìù {refactoring_info}\n\nü§ñ –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É...")
                else:
                    await status_msg.edit_text("üìã –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É...")
                
                parsed = {
                    'summary': summary,
                    'description': description,
                    'queue': extracted_data.get('queue'),
                    'priority': extracted_data.get('priority'),
                    'assignee': extracted_data.get('assignee'),
                    'type': extracted_data.get('type'),
                    'tags': extracted_data.get('tags')
                }
            else:
                # –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é LLM
                parsed = await self.llm_service.parse_issue_description(text)
                await status_msg.edit_text("üìã –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            if not user:
                await status_msg.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            user_queues = db.query(Queue).filter(Queue.user_id == user.id).all()
            if not user_queues:
                await status_msg.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π. –î–æ–±–∞–≤—å—Ç–µ –æ—á–µ—Ä–µ–¥—å —Å –ø–æ–º–æ—â—å—é /add_queue")
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            queue_key = parsed.get('queue') or user_queues[0].queue_key
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            issue = self.tracker_service.create_issue(
                queue_key=queue_key,
                summary=parsed['summary'],
                description=parsed['description'],
                assignee=parsed.get('assignee'),
                priority=parsed.get('priority', 'Medium')
            )
            
            if issue:
                issue_url = f"https://tracker.yandex.ru/{issue['key']}"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ
                message = f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                message += f"üìã [{issue['key']}]({issue_url})\n"
                message += f"üìù {issue['summary']}\n"
                message += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {issue.get('assignee', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
                message += f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {issue.get('priority', '–°—Ä–µ–¥–Ω–∏–π')}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                if extracted_data.get('refactoring_changes'):
                    message += f"\n\nüí° –£–ª—É—á—à–µ–Ω–∏—è: {', '.join(extracted_data['refactoring_changes'][:3])}"
                
                await status_msg.edit_text(message, parse_mode='HTML')
            else:
                await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

    async def set_schedule_from_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            chat_id = str(update.effective_chat.id)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
            import re
            time_match = re.search(r'(\d{1,2}):(\d{2})', text)
            if not time_match:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM. –ü—Ä–∏–º–µ—Ä: 09:30")
                return
            
            hour, minute = map(int, time_match.groups())
            if not (0 <= hour < 24 and 0 <= minute < 60):
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 09:30")
                return
            
            schedule_time = f"{hour:02d}:{minute:02d}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            if hasattr(self, 'scheduler') and self.scheduler:
                success = self.scheduler.update_user_schedule(chat_id, schedule_time)
                if success:
                    await update.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {schedule_time}. –î–∞–π–¥–∂–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è.")
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                await update.message.reply_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
        logger.info("=== CALLBACK HANDLER CALLED ===")
        logger.info(f"=== UPDATE TYPE: {type(update)} ===")
        logger.info(f"=== UPDATE: {update} ===")
        
        try:
            query = update.callback_query
            chat_id = str(query.message.chat.id) if query.message else 'unknown'
            logger.info(f"handle_callback: chat_id={chat_id}, data={query.data}, user_data={context.user_data}")
            await query.answer()
            
            if query.data.startswith("create_in_"):
                queue_key = query.data.replace("create_in_", "")
                context.user_data['selected_queue'] = queue_key
                context.user_data['creating_issue'] = True
                logger.info(f"handle_callback: set selected_queue={queue_key}, creating_issue=True for chat_id={chat_id}")
                
                await query.edit_message_text(
                    f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ {queue_key}\n\n"
                    "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'"
                )
                logger.info(f"handle_callback: sent message asking for task description")
            else:
                logger.info(f"handle_callback: unknown callback data: {query.data}")
                
        except Exception as e:
            logger.error(f"handle_callback: ERROR: {e}")
            logger.error(f"handle_callback: update={update}")
            logger.error(f"handle_callback: context={context}")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ <b>AI-Tracker</b> - –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞–±–æ—Ç–µ —Å Yandex Tracker

üìä <b>Core-—Ñ—É–Ω–∫—Ü–∏–∏ (—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ):</b>
‚Ä¢ <code>/send_now</code> - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å–µ–π—á–∞—Å
‚Ä¢ <code>/show_available_queues</code> - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
‚Ä¢ <code>/add_queue &lt;–∫–ª—é—á&gt;</code> - –î–æ–±–∞–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
‚Ä¢ <code>/list_queues</code> - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –æ—á–µ—Ä–µ–¥–∏
‚Ä¢ <code>/set_schedule HH:MM</code> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞

ü§ñ <b>Beta-—Ñ—É–Ω–∫—Ü–∏–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):</b>
‚Ä¢ <code>/create_task</code> - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –ò–ò –∞–Ω–∞–ª–∏–∑
‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥"
‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: "—É—Å—Ç–∞–Ω–æ–≤–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 10:00"

üé§ <b>Alpha-—Ñ—É–Ω–∫—Ü–∏–∏ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ):</b>
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–æ—Ç—É –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ

üìù <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>

<b>Core-—Ñ—É–Ω–∫—Ü–∏–∏:</b>
<code>
/send_now
/show_available_queues
/add_queue TEST
/set_schedule 09:00
</code>

<b>Beta-—Ñ—É–Ω–∫—Ü–∏–∏ (—Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç):</b>
<code>
–ø–æ–∫–∞–∂–∏ –¥–∞–π–¥–∂–µ—Å—Ç
—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
—É—Å—Ç–∞–Ω–æ–≤–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 19:30
–ø–æ–∫–∞–∂–∏ –æ—á–µ—Ä–µ–¥–∏
</code>

<b>Alpha-—Ñ—É–Ω–∫—Ü–∏–∏:</b>
<code>
üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
</code>

üîß <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @mokyzzzee
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ issues –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ Core-—Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
‚Ä¢ Beta-—Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–π
‚Ä¢ Alpha-—Ñ—É–Ω–∫—Ü–∏–∏ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
"""
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def set_schedule_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_schedule <HH:MM>"""
        chat_id = str(update.effective_chat.id)
        if not context.args or len(context.args[0]) != 5 or ':' not in context.args[0]:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM. –ü—Ä–∏–º–µ—Ä: /set_schedule 09:30")
            return
        schedule_time = context.args[0]
        try:
            hour, minute = map(int, schedule_time.split(':'))
            if not (0 <= hour < 24 and 0 <= minute < 60):
                raise ValueError
        except Exception:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: /set_schedule 09:30")
            return
        try:
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            if not user:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            user.digest_schedule = schedule_time
            db.commit()
            # –í—ã–∑–æ–≤–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if hasattr(self, 'scheduler') and self.scheduler:
                self.scheduler.update_user_schedule(user.chat_id, schedule_time)
            await update.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {schedule_time}. –î–∞–π–¥–∂–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_schedule_command: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def remove_queue_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_queue"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        await update.message.reply_text("üóëÔ∏è –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")

    async def show_available_queues_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /show_available_queues"""
        chat_id = str(update.effective_chat.id)
        
        try:
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            queues = self.tracker_service.get_queues()
            
            if not queues:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –≤ Yandex Tracker.")
                return
            
            message = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏:\n\n"
            for queue in queues:
                message += f"‚Ä¢ {queue['key']} - {queue['name']}\n"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_available_queues_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.")

    async def create_task_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_task - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ LLM –∞–Ω–∞–ª–∏–∑"""
        chat_id = str(update.effective_chat.id)
        
        try:
            db = next(get_db())
            user = db.query(User).filter(User.chat_id == chat_id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_queues = db.query(Queue).filter(Queue.user_id == user.id).all()
            if not user_queues:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.\n"
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ—á–µ—Ä–µ–¥–∏ —Å –ø–æ–º–æ—â—å—é /add_queue <–∫–ª—é—á>"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            if not context.args:
                await update.message.reply_text(
                    "üìù –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å.\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ /create_task –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
                    "‚Ä¢ /create_task –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è API\n"
                    "‚Ä¢ /create_task –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º\n\n"
                    "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–º –∑–∞–¥–∞—á—É —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!"
                )
                return
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
            task_description = " ".join(context.args)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
                available_queues = [q.queue_key for q in user_queues]
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ Yandex Tracker
                priorities = self.tracker_service.get_priorities()
                available_priorities = [p['display'] for p in priorities] if priorities else ["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ LLM
                task_data = await self.llm_service.analyze_and_create_task(task_description, available_queues, available_priorities)
                
                if not task_data.get('queue'):
                    await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∑–∞–¥–∞—á–∏.")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞
                analysis_text = f"""
üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {task_data['summary']}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {task_data['description'][:200]}{'...' if len(task_data['description']) > 200 else ''}
üè∑Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task_data['priority']}
üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task_data['assignee'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
üìÇ –û—á–µ—Ä–µ–¥—å: {task_data['queue']}
üìÖ –°—Ä–æ–∫: {task_data['deadline'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üè∑Ô∏è –¢–µ–≥–∏: {task_data['tags'] or '–ù–µ—Ç'}

–°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É...
                """
                await processing_msg.edit_text(analysis_text)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Yandex Tracker
                created_issue = self.tracker_service.create_issue(
                    queue_key=task_data['queue'],
                    summary=task_data['summary'],
                    description=task_data['description'],
                    assignee=task_data['assignee'],
                    priority=task_data['priority']
                )
                
                if created_issue:
                    success_text = f"""
‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üîó {created_issue['key']}: {created_issue['summary']}
üìÇ –û—á–µ—Ä–µ–¥—å: {created_issue['queue']}
üìä –°—Ç–∞—Ç—É—Å: {created_issue['status']}
üåê –°—Å—ã–ª–∫–∞: {created_issue['url']}

–ó–∞–¥–∞—á–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ
                    """
                    await processing_msg.edit_text(success_text)
                else:
                    await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ Yandex Tracker.")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
                await processing_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ create_task_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

    def run_polling(self):
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling(allowed_updates=["message", "callback_query"])

    async def send_status(self, update: Update, message: str, edit_message=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã"""
        try:
            if edit_message:
                await edit_message.edit_text(message)
            else:
                await update.message.reply_text(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def send_processing_status(self, update: Update, status: str, edit_message=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —ç–º–æ–¥–∑–∏"""
        status_emoji = {
            "analyzing": "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...",
            "creating": "üîÑ –°–æ–∑–¥–∞—é...",
            "transcribing": "üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é...",
            "fetching": "üì° –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ...",
            "processing": "‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...",
            "sending": "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é..."
        }
        
        emoji_text = status_emoji.get(status, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        await self.send_status(update, emoji_text, edit_message) 